# -*- coding: utf-8 -*-
"""lwpg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N5tiDP5zc-2Fb0svQotInMDyziSOgG70

Load a random image:
"""

import cv2
import numpy as np
import urllib.request
from google.colab.patches import cv2_imshow

req = urllib.request.urlopen('https://hips.hearstapps.com/hmg-prod/images/nature-quotes-landscape-1648265299.jpg?crop=1.00xw:0.760xh;0,0.0587xh&resize=1200:*')
arr = np.asarray(bytearray(req.read()), dtype=np.uint8)

img = cv2.imdecode(arr, -1)
cv2_imshow(img)

"""RGB to YUV"""

yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)
y, u, v = cv2.split(yuv)
# Chroma subsampling:
halfU = cv2.resize(u, (0, 0), fx = 0.25, fy = 0.25)
halfV = cv2.resize(v, (0, 0), fx = 0.25, fy = 0.25)

"""Now the magic: progressive quantization of differences"""

dic275down = {255:7}
for i in range(255):
    dic275down[i] = np.round(i**(1/2.75)).astype(np.int16)

dic275up = {0:0, 1:2, 2:8, 3:22, 4:47, 5:86, 6:140, 7:213}

def down275(diff):
    return dic275down[diff]

def up275(diff):
    return dic275up[diff]

def diff(row):
    error = 0
    diffs = np.empty(row.size, dtype=np.int16)
    lastdiff = 0
    for i in range(row.size):
        diff = row[i].astype(np.int16)-lastdiff
        if diff > 0:
            diffs[i] = down275(diff)
            pixel = up275(diffs[i]) + lastdiff
            error = row[i] - pixel
        elif diff < 0:
            diffs[i] = -down275(abs(diff))
            pixel = lastdiff - up275(abs(diffs[i]))
            error = row[i] - pixel
        else:
            diffs[i] = 0
            error = 0
        lastdiff = row[i] - error
    return diffs

#transform the image row by row
diffsY = np.array([diff(row) for row in y]).astype(np.uint8)
diffsU = np.array([diff(row) for row in halfU]).astype(np.uint8)
diffsV = np.array([diff(row) for row in halfV]).astype(np.uint8)

"""Compress the outcome with LZW:"""

def lzw_compress(data): #from GPT
    # Initialize the dictionary with single byte entries
    dictionary = {bytes([i]): i for i in range(256)}
    next_code = 256

    compressed_data = []
    w = b""

    for byte in data:
        wc = w + bytes([byte])
        if wc in dictionary:
            w = wc
        else:
            compressed_data.append(dictionary[w])
            if next_code < 2**16:  # Limit dictionary size to 16-bit codes
                dictionary[wc] = next_code
                next_code += 1
            w = bytes([byte])

    # Add the final entry
    if w:
        compressed_data.append(dictionary[w])

    return np.array(compressed_data)

compressed = lzw_compress([*diffsY.flatten(), *diffsU.flatten(),  *diffsV.flatten()])

"""See the gain:"""

print(len(compressed), "bytes, Compression ratio: ", len(img.flatten())/len(compressed))

"""So far so good and the final thing, is decompress."""

def lzw_decompress(compressed_data):
    # Initialize the dictionary with single byte entries
    dictionary = {i: bytes([i]) for i in range(256)}
    next_code = 256

    w = bytes([compressed_data.pop(0)])
    decompressed_data = bytearray(w)

    for k in compressed_data:
        if k in dictionary:
            entry = dictionary[k]
        elif k == next_code:  # Special case for k == next_code
            entry = w + w[:1]
        else:
            raise ValueError("Invalid compressed data")

        decompressed_data.extend(entry)

        # Add new entry to the dictionary
        if next_code < 2**16:
            dictionary[next_code] = w + entry[:1]
            next_code += 1

        w = entry

    return np.array(decompressed_data)

dec = lzw_decompress(compressed.tolist())
decY = dec[:diffsY.size]
decU = dec[diffsY.size:diffsY.size+diffsU.size]
decV = dec[diffsY.size+diffsU.size:]

decY = decY.reshape(diffsY.shape).astype(np.int8)
decU = decU.reshape(diffsU.shape).astype(np.int8)
decV = decV.reshape(diffsV.shape).astype(np.int8)

"""Differences back to pixels:"""

def idiff(diffs):
    pixels = np.empty(diffs.size, dtype=np.int16)
    lastpix = 0
    for i in range(diffs.size):
        if diffs[i] > 0:
            pixels[i] = lastpix + up275(diffs[i])
        elif diffs[i] < 0:
            pixels[i] = lastpix - up275(abs(diffs[i]))
        else:
            pixels[i] = lastpix
        lastpix = pixels[i]
        if pixels[i] > 255:
            pixels[i] = 255
        if pixels[i] < 0:
            pixels[i] = 0

    return pixels

Y = np.array([idiff(row) for row in decY]).astype(np.uint8)
U = np.array([idiff(row) for row in decU]).astype(np.uint8)
V = np.array([idiff(row) for row in decV]).astype(np.uint8)
U = cv2.resize(U, (u.shape[1], u.shape[0]))
V = cv2.resize(V, (v.shape[1], v.shape[0]))
restored = cv2.cvtColor(cv2.merge((Y, V, U)), cv2.COLOR_YCrCb2BGR)

"""See any difference?"""

cv2_imshow(restored)

"""# References

https://stackoverflow.com/questions/21061814/how-can-i-read-an-image-from-an-internet-url-in-python-cv2-scikit-image-and-mah

https://medium.com/@colombia202324/python-open-the-image-from-the-url-and-gif-to-png-aef42fb0c657

https://en.wikipedia.org/wiki/Chroma_subsampling
"""